name: Deploy with Terraform

on:
  push:
    branches: [ "main" ]
  # Removed pull_request trigger to avoid unnecessary runs

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx for better caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build, tag, and push docker image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/masat-dev:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
            NEXT_PUBLIC_RESPONSE_ENCRYPTION_KEY=${{ secrets.NEXT_PUBLIC_RESPONSE_ENCRYPTION_KEY }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            NODE_ENV=production
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            FACEBOOK_CLIENT_ID=${{ secrets.FACEBOOK_CLIENT_ID }}
            FACEBOOK_CLIENT_SECRET=${{ secrets.FACEBOOK_CLIENT_SECRET }}
            AWS_REGION=eu-central-1
            SES_SOURCE_EMAIL=contact@shiftcrowd.eu
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Move cache to avoid growing cache size
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Set up Terraform with caching
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4

      # Cache Terraform files
      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('terraform/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      # Add Terraform validation step
      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      # Set common Terraform variables
      - name: Set Terraform Variables
        run: |
          echo "TF_VAR_image_uri=${{ steps.login-ecr.outputs.registry }}/masat-dev:${{ github.sha }}" >> $GITHUB_ENV
          echo "TF_VAR_mongo_atlas_private_key=${{ secrets.MONGO_ATLAS_PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_mongo_atlas_public_key=${{ secrets.MONGO_ATLAS_PUBLIC_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_atlas_org_id=${{ secrets.ATLAS_ORG_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_google_client_id=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_google_client_secret=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_nextauth_secret=${{ secrets.NEXTAUTH_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_facebook_client_id=${{ secrets.FACEBOOK_CLIENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_facebook_client_secret=${{ secrets.FACEBOOK_CLIENT_SECRET }}" >> $GITHUB_ENV

      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        working-directory: terraform

      - name: Force ECS Service Update
        run: |
          aws ecs update-service --cluster masat-dev-cluster --service masat-dev-ecs-service --force-new-deployment

      # Add deployment status notification
      - name: Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment completed successfully!"
            echo "Image: ${{ steps.login-ecr.outputs.registry }}/masat-dev:${{ github.sha }}"
            echo "Deployed at: $(date)"
          else
            echo "❌ Deployment failed!"
          fi
